//! Contains error types.

use std::{
    error::Error as StdError,
    fmt::{Display, Formatter, Result as FmtResult},
    result::Result as StdResult,
};

use num_derive::FromPrimitive;
use num_traits::FromPrimitive;
use thiserror::Error as ThisError;

/// Error code returned from OpenVR API.
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, FromPrimitive)]
#[repr(u32)]
pub enum InitError {
    Unknown = 1,
    InitInstallationNotFound = 100,
    InitInstallationCorrupt = 101,
    InitVrClientDllNotFound = 102,
    InitFileNotFound = 103,
    InitFactoryNotFound = 104,
    InitInterfaceNotFound = 105,
    InitInvalidInterface = 106,
    InitUserConfigDirectoryInvalid = 107,
    InitHmdNotFound = 108,
    InitNotInitialized = 109,
    InitPathRegistryNotFound = 110,
    InitNoConfigPath = 111,
    InitNoLogPath = 112,
    InitPathRegistryNotWritable = 113,
    InitAppInfoInitFailed = 114,
    InitRetry = 115,
    InitInitCanceledByUser = 116,
    InitAnotherAppLaunching = 117,
    InitSettingsInitFailed = 118,
    InitShuttingDown = 119,
    InitTooManyObjects = 120,
    InitNoServerForBackgroundApp = 121,
    InitNotSupportedWithCompositor = 122,
    InitNotAvailableToUtilityApps = 123,
    InitInternal = 124,
    InitHmdDriverIdIsNone = 125,
    InitHmdNotFoundPresenceFailed = 126,
    InitVrMonitorNotFound = 127,
    InitVrMonitorStartupFailed = 128,
    InitLowPowerWatchdogNotSupported = 129,
    InitInvalidApplicationType = 130,
    InitNotAvailableToWatchdogApps = 131,
    InitWatchdogDisabledInSettings = 132,
    InitVrDashboardNotFound = 133,
    InitVrDashboardStartupFailed = 134,
    InitVrHomeNotFound = 135,
    InitVrHomeStartupFailed = 136,
    InitRebootingBusy = 137,
    InitFirmwareUpdateBusy = 138,
    InitFirmwareRecoveryBusy = 139,
    InitUsbServiceBusy = 140,
    InitVrWebHelperStartupFailed = 141,
    InitTrackerManagerInitFailed = 142,
    InitAlreadyRunning = 143,
    InitFailedForVrMonitor = 144,
    InitPropertyManagerInitFailed = 145,
    InitWebServerFailed = 146,
    InitIllegalTypeTransition = 147,
    InitMismatchedRuntimes = 148,
    InitInvalidProcessId = 149,
    InitVrServiceStartupFailed = 150,
    InitPrismNeedsNewDrivers = 151,
    InitPrismStartupTimedOut = 152,
    InitCouldNotStartPrism = 153,
    InitCreateDriverDirectDeviceFailed = 154,
    InitPrismExitedUnexpectedly = 155,
    DriverFailed = 200,
    DriverUnknown = 201,
    DriverHmdUnknown = 202,
    DriverNotLoaded = 203,
    DriverRuntimeOutOfDate = 204,
    DriverHmdInUse = 205,
    DriverNotCalibrated = 206,
    DriverCalibrationInvalid = 207,
    DriverHmdDisplayNotFound = 208,
    DriverTrackedDeviceInterfaceUnknown = 209,
    DriverHmdDriverIdOutOfBounds = 211,
    DriverHmdDisplayMirrored = 212,
    DriverHmdDisplayNotFoundLaptop = 213,
    IpcServerInitFailed = 300,
    IpcConnectFailed = 301,
    IpcSharedStateInitFailed = 302,
    IpcCompositorInitFailed = 303,
    IpcMutexInitFailed = 304,
    IpcFailed = 305,
    IpcCompositorConnectFailed = 306,
    IpcCompositorInvalidConnectResponse = 307,
    IpcConnectFailedAfterMultipleAttempts = 308,
    IpcConnectFailedAfterTargetExited = 309,
    IpcNamespaceUnavailable = 310,
    CompositorFailed = 400,
    CompositorD3D11HardwareRequired = 401,
    CompositorFirmwareRequiresUpdate = 402,
    CompositorOverlayInitFailed = 403,
    CompositorScreenshotsInitFailed = 404,
    CompositorUnableToCreateDevice = 405,
    CompositorSharedStateIsNull = 406,
    CompositorNotificationManagerIsNull = 407,
    CompositorResourceManagerClientIsNull = 408,
    CompositorMessageOverlaySharedStateInitFailure = 409,
    CompositorPropertiesInterfaceIsNull = 410,
    CompositorCreateFullscreenWindowFailed = 411,
    CompositorSettingsInterfaceIsNull = 412,
    CompositorFailedToShowWindow = 413,
    CompositorDistortInterfaceIsNull = 414,
    CompositorDisplayFrequencyFailure = 415,
    CompositorRendererInitializationFailed = 416,
    CompositorDxgiFactoryInterfaceIsNull = 417,
    CompositorDxgiFactoryCreateFailed = 418,
    CompositorDxgiFactoryQueryFailed = 419,
    CompositorInvalidAdapterDesktop = 420,
    CompositorInvalidHmdAttachment = 421,
    CompositorInvalidOutputDesktop = 422,
    CompositorInvalidDeviceProvided = 423,
    CompositorD3D11RendererInitializationFailed = 424,
    CompositorFailedToFindDisplayMode = 425,
    CompositorFailedToCreateSwapChain = 426,
    CompositorFailedToGetBackBuffer = 427,
    CompositorFailedToCreateRenderTarget = 428,
    CompositorFailedToCreateDxgi2SwapChain = 429,
    CompositorFailedtoGetDxgi2BackBuffer = 430,
    CompositorFailedToCreateDxgi2RenderTarget = 431,
    CompositorFailedToGetDxgiDeviceInterface = 432,
    CompositorSelectDisplayMode = 433,
    CompositorFailedToCreateNvApiRenderTargets = 434,
    CompositorNvApiSetDisplayMode = 435,
    CompositorFailedToCreateDirectModeDisplay = 436,
    CompositorInvalidHmdPropertyContainer = 437,
    CompositorUpdateDisplayFrequency = 438,
    CompositorCreateRasterizerState = 439,
    CompositorCreateWireframeRasterizerState = 440,
    CompositorCreateSamplerState = 441,
    CompositorCreateClampToBorderSamplerState = 442,
    CompositorCreateAnisoSamplerState = 443,
    CompositorCreateOverlaySamplerState = 444,
    CompositorCreatePanoramaSamplerState = 445,
    CompositorCreateFontSamplerState = 446,
    CompositorCreateNoBlendState = 447,
    CompositorCreateBlendState = 448,
    CompositorCreateAlphaBlendState = 449,
    CompositorCreateBlendStateMaskR = 450,
    CompositorCreateBlendStateMaskG = 451,
    CompositorCreateBlendStateMaskB = 452,
    CompositorCreateDepthStencilState = 453,
    CompositorCreateDepthStencilStateNoWrite = 454,
    CompositorCreateDepthStencilStateNoDepth = 455,
    CompositorCreateFlushTexture = 456,
    CompositorCreateDistortionSurfaces = 457,
    CompositorCreateConstantBuffer = 458,
    CompositorCreateHmdPoseConstantBuffer = 459,
    CompositorCreateHmdPoseStagingConstantBuffer = 460,
    CompositorCreateSharedFrameInfoConstantBuffer = 461,
    CompositorCreateOverlayConstantBuffer = 462,
    CompositorCreateSceneTextureIndexConstantBuffer = 463,
    CompositorCreateReadableSceneTextureIndexConstantBuffer = 464,
    CompositorCreateLayerGraphicsTextureIndexConstantBuffer = 465,
    CompositorCreateLayerComputeTextureIndexConstantBuffer = 466,
    CompositorCreateLayerComputeSceneTextureIndexConstantBuffer = 467,
    CompositorCreateComputeHmdPoseConstantBuffer = 468,
    CompositorCreateGeomConstantBuffer = 469,
    CompositorCreatePanelMaskConstantBuffer = 470,
    CompositorCreatePixelSimUbo = 471,
    CompositorCreateMsaaRenderTextures = 472,
    CompositorCreateResolveRenderTextures = 473,
    CompositorCreateComputeResolveRenderTextures = 474,
    CompositorCreateDriverDirectModeResolveTextures = 475,
    CompositorOpenDriverDirectModeResolveTextures = 476,
    CompositorCreateFallbackSyncTexture = 477,
    CompositorShareFallbackSyncTexture = 478,
    CompositorCreateOverlayIndexBuffer = 479,
    CompositorCreateOverlayVertexBuffer = 480,
    CompositorCreateTextVertexBuffer = 481,
    CompositorCreateTextIndexBuffer = 482,
    CompositorCreateMirrorTextures = 483,
    CompositorCreateLastFrameRenderTexture = 484,
    CompositorCreateMirrorOverlay = 485,
    CompositorFailedToCreateVirtualDisplayBackbuffer = 486,
    CompositorDisplayModeNotSupported = 487,
    CompositorCreateOverlayInvalidCall = 488,
    CompositorCreateOverlayAlreadyInitialized = 489,
    CompositorFailedToCreateMailbox = 490,
    CompositorWindowInterfaceIsNull = 491,
    CompositorSystemLayerCreateInstance = 492,
    CompositorSystemLayerCreateSession = 493,
    VendorSpecificUnableToConnectToOculusRuntime = 1000,
    VendorSpecificWindowsNotInDevMode = 1001,
    VendorSpecificHmdFoundCantOpenDevice = 1101,
    VendorSpecificHmdFoundUnableToRequestConfigStart = 1102,
    VendorSpecificHmdFoundNoStoredConfig = 1103,
    VendorSpecificHmdFoundConfigTooBig = 1104,
    VendorSpecificHmdFoundConfigTooSmall = 1105,
    VendorSpecificHmdFoundUnableToInitZlib = 1106,
    VendorSpecificHmdFoundCantReadFirmwareVersion = 1107,
    VendorSpecificHmdFoundUnableToSendUserDataStart = 1108,
    VendorSpecificHmdFoundUnableToGetUserDataStart = 1109,
    VendorSpecificHmdFoundUnableToGetUserDataNext = 1110,
    VendorSpecificHmdFoundUserDataAddressRange = 1111,
    VendorSpecificHmdFoundUserDataError = 1112,
    VendorSpecificHmdFoundConfigFailedSanityCheck = 1113,
    VendorSpecificOculusRuntimeBadInstall = 1114,
    SteamSteamInstallationNotFound = 2000,
    LastError = 2001,
}

impl InitError {
    /// Converts raw error code into InitError.
    pub fn from_raw(n: u32) -> InitError {
        let parsed = FromPrimitive::from_u32(n);
        match parsed {
            Some(e) => e,
            None => unreachable!("Unknown error code: {}", n),
        }
    }
}

/// Error code returned from tracked device property API.
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, FromPrimitive)]
#[repr(u32)]
pub enum TrackedPropertyError {
    WrongDataType = 1,
    WrongDeviceClass = 2,
    BufferTooSmall = 3,
    UnknownProperty = 4,
    InvalidDevice = 5,
    CouldNotContactServer = 6,
    ValueNotProvidedByDevice = 7,
    StringExceedsMaximumLength = 8,
    NotYetAvailable = 9,
    PermissionDenied = 10,
    InvalidOperation = 11,
    CannotWriteToWildcards = 12,
    IPCReadFailure = 13,
    OutOfMemory = 14,
    InvalidContainer = 15,
}

impl TrackedPropertyError {
    /// Converts raw error code into InitError.
    pub fn from_raw(n: u32) -> TrackedPropertyError {
        let parsed = FromPrimitive::from_u32(n);
        match parsed {
            Some(e) => e,
            None => unreachable!("Unknown error code: {}", n),
        }
    }
}

#[derive(Debug, ThisError)]
/// Represents integrated OpenVR API error.
pub enum Error {
    AlreadyInitialized,
    Init(InitError),
    TrackedProperty(TrackedPropertyError),
    InvalidInterfaceMethod,
    Internal(Box<dyn StdError + Send + Sync>),
}

impl Display for Error {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        match self {
            Error::AlreadyInitialized => write!(f, "OpenVR already initialized"),
            Error::Init(e) => write!(f, "InitError: {:?}", e),
            Error::TrackedProperty(e) => write!(f, "TrackedProperty: {:?}", e),
            Error::InvalidInterfaceMethod => write!(f, "Interface method not found"),
            Error::Internal(e) => write!(f, "Internal: {}", e),
        }
    }
}

pub type Result<T> = StdResult<T, Error>;
